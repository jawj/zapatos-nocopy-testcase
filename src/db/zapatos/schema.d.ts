/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v2.0.1), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {
  import * as db from 'zapatos';

type BasicWhereableFromInsertable<T> = { [K in keyof T]: Exclude<T[K] | db.ParentColumn, null | db.DefaultType> };
type WhereableFromBasicWhereable<T> = { [K in keyof T]?: T[K] | db.SQLFragment<any, T[K]> };
type WhereableFromInsertable<T> = WhereableFromBasicWhereable<BasicWhereableFromInsertable<T>>;

type UpdatableFromInsertable<T> = { [K in keyof T]?: T[K] | db.SQLFragment<any, T[K]> };

type JSONSelectableFromSelectable<T> = { [K in keyof T]:
  Date extends T[K] ? Exclude<T[K], Date> | db.DateString :
  Date[] extends T[K] ? Exclude<T[K], Date[]> | db.DateString[] :
  T[K]
};

/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export namespace quotes {
  export type Table = 'quotes';
  export interface Selectable {
    id: number;
    quote: string;
    attribution: string | null;
  }
  export interface Insertable {
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    quote: string | db.Parameter<string> | db.SQLFragment;
    attribution?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
  }
  export interface Updatable extends UpdatableFromInsertable<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
  export type UniqueIndex = 'quotes_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = quotes.Table;
export type Selectable = quotes.Selectable;
export type Whereable = quotes.Whereable;
export type Insertable = quotes.Insertable;
export type Updatable = quotes.Updatable;
export type UniqueIndex = quotes.UniqueIndex;
export type Column = quotes.Column;
export type AllTables = [quotes.Table];


export type SelectableForTable<T extends Table> = {
  quotes: quotes.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  quotes: quotes.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  quotes: quotes.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  quotes: quotes.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  quotes: quotes.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  quotes: quotes.Column;
}[T];

export type SQLForTable<T extends Table> = {
  quotes: quotes.SQL;
}[T];


} // end declare module
  